@page "/astronomy/star-watcher"
@using Asterism
@inject IAstroObjectService AstroObjectService
@inject IJSRuntime JSRuntime


<h3>Astronomy / Visible Objects</h3>
<p class="text">
    Find objects to observe in your night sky.
</p>
<Row>
    <Column ColumnSize="ColumnSize.Is12.OnMobile.Is4.OnWidescreen">
        <Card>
            <CardHeader>Viewing Options</CardHeader>
            <CardBody>
                <CardText>
                    <Divider DividerType="DividerType.TextContent" Text="Time" />
                    <Row Gutter="(0, 32)">
                        <Column>
                            <label for="startTime">Start Time</label>
                            <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime"
                                      @bind-Date="@_observingOptions.StartTime" />
                        </Column>
                        <Column>
                            <label for="endTime">End Time</label>
                            <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime"
                                      @bind-Date="@_observingOptions.EndTime" />
                        </Column>
                    </Row>
                    <Divider DividerType="DividerType.TextContent" Text="Location" />
                    <Row Gutter="(0, 32)">
                        <Column>
                            <label for="latitude">Latitude</label>
                            <input type="number" step="any" class="form-control" id="latitude"
                                   placeholder="Enter latitude"
                                   @bind-value="@_observingOptions.Latitude" />
                        </Column>
                        <Column>
                            <label for="longitude">Longitude</label>
                            <input type="number" step="any" class="form-control" id="longitude"
                                   placeholder="Enter longitude"
                                   @bind-value="@_observingOptions.Longitude" />
                        </Column>
                    </Row>
                    <Divider DividerType="DividerType.TextContent" Text="Viewing Range" />
                    <Row Gutter="(0, 16)">
                        <Column>
                            <label for="min-altitude">Minimum Altitude</label>
                            <input type="number" step="any" class="form-control" id="min-altitude"
                                   @bind-value="@_observingOptions.MinAltitude" />
                            <Small TextColor="TextColor.Muted">Use to omit objects too near to the horizon.</Small>
                        </Column>
                    </Row>
                    <!--
                    <div class="row mb-3">
                        <div class="col">
                            <label for="azimuth">Azimuth Range</label>
                            <div class="row" id="azimuth">
                                <div class="col-lg-6">
                                    <input type="number" step="any" class="form-control"
                                           placeholder="Enter minimum azimuth"
                                           aria-describedby="min-azimuth-help"
                                           @bind-value="@_observingOptions.MinAzimuth" />
                                    <small class="form-text text-muted" id="min-azimuth-help">
                                        Min azimuth
                                    </small>
                                </div>
                                <div class="col-lg-6">
                                    <input type="number" step="any" class="form-control"
                                           placeholder="Enter maximum azimuth"
                                           aria-describedby="max-azimuth-help"
                                           @bind-value="@_observingOptions.MaxAzimuth" />
                                    <small class="form-text text-muted" id="max-azimuth-help">
                                        Max azimuth
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <label for="altitude">Altitude Range</label>
                            <div class="row" id="altitude">
                                <div class="col-lg-6">
                                    <input type="number" step="any" class="form-control"
                                           placeholder="Enter minimum altitde"
                                           aria-describedby="min-altitde-help"
                                           @bind-value="@_observingOptions.MinAltitude" />
                                    <small class="form-text text-muted" id="min-altitude-help">
                                        Min altitude
                                    </small>
                                </div>
                                <div class="col-lg-6">
                                    <input type="number" step="any" class="form-control"
                                           placeholder="Enter maximum altitude"
                                           aria-describedby="max-altitude-help"
                                           @bind-value="@_observingOptions.MaxAltitude" />
                                    <small class="form-text text-muted" id="max-altitude-help">
                                        Max altitude
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                    -->
                </CardText>
                <Button Color="Color.Primary" Loading="@_findingObjects"
                        Clicked="@HandleValidSubmit">
                    <LoadingTemplate>
                        Finding...
                    </LoadingTemplate>
                    <ChildContent>
                        Find
                    </ChildContent>
                </Button>
            </CardBody>
        </Card>
    </Column>
    <Column>
        @foreach (var obj in _filteredObjectReps)
        {
            <!-- Display
                o ?Name
                o Classifications
                o RA/Dec
                o Alt/Az
                o Cardinal direction
            -->
            <Card>
                <CardBody>
                    <Div>
                        <Text TextWeight="TextWeight.Bold">
                            @(string.IsNullOrWhiteSpace(obj.Name)
                        ? ""
                        : obj.Name + " - "
                        )
                        </Text>
                        <Text>
                            @string.Join(
                        " | ",
                        @obj.Classification.CatalogueId.Keys.Select(
                        catalogue => $"{catalogue} {obj.Classification.CatalogueId[catalogue]}")
                        )
                        </Text>
                    </Div>
                    <Divider />
                    <Table Narrow="true" Borderless="true">
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>Right Ascension</TableHeaderCell>
                                <TableHeaderCell>Declination</TableHeaderCell>
                                <TableHeaderCell>Azimuth</TableHeaderCell>
                                <TableHeaderCell>Altitude</TableHeaderCell>
                                <TableHeaderCell>Cardinal</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            <TableRow>
                                <TableRowCell>@obj.RightAscension</TableRowCell>
                                <TableRowCell>@obj.Declination</TableRowCell>
                                <TableRowCell>@(obj.AzimuthDegree)&#176; @(obj.AzimuthArcMinute)' @(obj.AzimuthArcSecond)"</TableRowCell>
                                <TableRowCell>@(obj.AltitudeDegree)&#176; @(obj.AltitudeArcMinute)' @(obj.AzimuthArcSecond)''</TableRowCell>
                                <TableRowCell>@obj.Cardinal</TableRowCell>
                            </TableRow>
                        </TableBody>
                    </Table>
                </CardBody>
            </Card>
        }
    </Column>
</Row>


@code {
    private class ObservingOptions
    {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public int TimeZone { get; set; }
        public double MinAzimuth { get; set; }
        public double MaxAzimuth { get; set; }
        public double MinAltitude { get; set; }
        public double MaxAltitude { get; set; }
    }

    private string Cardinal(double az)
    {
        string[] caridnals = { "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW", "N" };
        return caridnals[(int)Math.Round(((double)az * 10 % 3600) / 225)];
    }

    private record AstroObjectRep(string Name,
        AstroObject.AstroObjectClassification Classification,
        double RightAscension,
        double Declination,
        int AzimuthDegree,
        int AzimuthArcMinute,
        double AzimuthArcSecond,
        int AltitudeDegree,
        int AltitudeArcMinute,
        double AltitudeArcSecond,
        string Cardinal
    );

    private EditContext? _editContext;
    private ObservingOptions _observingOptions = new ObservingOptions();
    private bool _findingObjects = false;
    private bool _badConnection = false;
    private IEnumerable<AstroObject> _filteredObjects = Enumerable.Empty<AstroObject>();
    private IEnumerable<AstroObjectRep> _filteredObjectReps = Enumerable.Empty<AstroObjectRep>();

    protected override async Task OnInitializedAsync()
    {
        _filteredObjects = Enumerable.Empty<AstroObject>();
        DateTime now = DateTime.Now;
        // Firefox does not support seconds, so round to previous minute
        _observingOptions = new ObservingOptions
            {
                StartTime = now.AddSeconds(-now.Second),
                EndTime = now.AddSeconds(-now.Second).AddHours(1),
                TimeZone = -5,
                MinAzimuth = 0d,
                MaxAzimuth = 180d,
                MinAltitude = 0d,
                MaxAltitude = 180d
            };
        _editContext = new EditContext(_observingOptions);
#if DEBUG
    AstroObject testObject = new AstroObject
    {
    Id="47",
    Name="Ambra Nebula",
    Classification= new AstroObject.AstroObjectClassification(
    CatalogueId: new Dictionary<AstroObject.Catalogue, int>
    {
    {AstroObject.Catalogue.Messier, 111},
    {AstroObject.Catalogue.NGC, 4747},
    {AstroObject.Catalogue.Caldwell, 17}
    },
    Type: AstroObject.Type.Diffuse,
    Subtype: AstroObject.Subtype.None,
    SubtypeClassification: "Reflection Nebula"
    ),
    RightAscension= 84d,
    Declination= 5.4d
    };
    AstroObject secondObject = testObject with {Name="Mia Nebula"};
    AstroObject thirdObject = testObject with {Name="Ellie Nebula"};
    _filteredObjects = new List<AstroObject>{testObject, secondObject, thirdObject};
#else
        _filteredObjects = await GetAllObjects();
#endif
        _filteredObjectReps = AstroObjectRepresentations(_filteredObjects, _observingOptions.StartTime, _observingOptions.TimeZone,
            new GeographicCoords(Latitude: _observingOptions.Latitude, Longitude: _observingOptions.Longitude));
        StateHasChanged();
    }

    private async Task GetCurrentPosition()
    {
        // BUSTED - need to figure out jsinterop to get this to work
        //  - See https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API
        /*
        <div class="col-lg-4 d-flex">
            <div class="btn btn-secondary mt-auto"
                    @onclick="@GetCurrentPosition">
                Use my location
        </div>
        </div>
        */
        var res = await JSRuntime.InvokeAsync<(double latitude, double longitude)>("geolocation.getLocation");
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        _findingObjects = true;
        try
        {
            _filteredObjects = await GetVisibleObjects();
            _badConnection = false;
        }
        catch
        {
            _badConnection = true;
        }
        _findingObjects = false;
    }

    private void HandleInvalidSubmit()
    {
    }

    private async Task<IEnumerable<AstroObject>> GetVisibleObjects()
    {
        // Convert horizontal coordinates to equitorial coordinates
        var minCoords = new HorizontalCoords(
            Azimuth: _observingOptions.MinAzimuth,
            Altitude: _observingOptions.MinAltitude
        ).ToEquitorialCoords(
            dateTime: _observingOptions.StartTime,
            geographicCoords: new GeographicCoords(
                Latitude: _observingOptions.Latitude,
                Longitude: _observingOptions.Longitude
            ),
            timeZone: _observingOptions.TimeZone
        );
        var maxCoords = new HorizontalCoords(
            Azimuth: _observingOptions.MaxAzimuth,
            Altitude: _observingOptions.MaxAltitude
        ).ToEquitorialCoords(
            dateTime: _observingOptions.EndTime,
            geographicCoords: new GeographicCoords(
                Latitude: _observingOptions.Latitude,
                Longitude: _observingOptions.Longitude
            ),
            timeZone: _observingOptions.TimeZone
        );

        // Call api service
        return await AstroObjectService.GetObjectsInRegion(minCoords, maxCoords);
        return Enumerable.Empty<AstroObject>();
    }

    private async Task<IEnumerable<AstroObject>> GetAllObjects()
    {
        try
        {
            return await AstroObjectService.GetAll();
        }
        catch
        {
            return Enumerable.Empty<AstroObject>();
        }
    }

    private IEnumerable<AstroObjectRep> AstroObjectRepresentations(IEnumerable<AstroObject> objs, DateTime dateTime, int timeZone, GeographicCoords geoCoords)
    {
        return objs.Select(ao =>
        {
            var horCoords = new Asterism.EquitorialCoords(RightAscension: ao.RightAscension, Declination: ao.Declination)
                .ToHorizontalCoords(dateTime, geoCoords, timeZone);
            int azDegree = (int)Math.Floor(horCoords.Azimuth);
            int azArcMin = (int)Math.Floor((horCoords.Azimuth - azDegree) * 100);
            double azArcSec = Math.Round(((horCoords.Azimuth - azDegree) * 100 - azArcMin) * 100, 1);
            int altDegree = (int)Math.Floor(horCoords.Altitude);
            int altArcMin = (int)Math.Floor((horCoords.Altitude - altDegree) * 100);
            double altArcSec = Math.Round(((horCoords.Altitude - altDegree) * 100 - altArcMin) * 100, 1);
            return new AstroObjectRep(
                Name: ao.Name,
                Classification: ao.Classification,
                RightAscension: ao.RightAscension,
                Declination: ao.Declination,
                AzimuthDegree: azDegree,
                AzimuthArcMinute: azArcMin,
                AzimuthArcSecond: azArcSec,
                AltitudeDegree: altDegree,
                AltitudeArcMinute: altArcMin,
                AltitudeArcSecond: altArcSec,
                Cardinal: Cardinal(horCoords.Azimuth)
            );
        });
    }
}
