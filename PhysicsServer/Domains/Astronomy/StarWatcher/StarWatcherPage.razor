@page "/astronomy/star-watcher"
@using Asterism
@using Humanizer;
@inject IAstroObjectService AstroObjectService
@inject IJSRuntime JSRuntime


<h3>Astronomy / Visible Objects</h3>
<p class="text">
    Find objects to observe in your night sky.
</p>
<Row>
    <Column ColumnSize="ColumnSize.Is12.OnMobile.Is4.OnWidescreen">
        <Card>
            <CardHeader>Viewing Options</CardHeader>
            <CardBody>
                <CardText>
                    <Divider DividerType="DividerType.TextContent" Text="Time" />
                    <Row Gutter="(0, 32)">
                        <Column>
                            <label for="startTime">Start Time</label>
                            <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime"
                                      @bind-Date="@_observingOptions.StartTime" />
                        </Column>
                        <Column>
                            <label for="endTime">End Time</label>
                            <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime"
                                      @bind-Date="@_observingOptions.EndTime" />
                        </Column>
                    </Row>
                    <Divider DividerType="DividerType.TextContent" Text="Location" />
                    <Row Gutter="(0, 32)">
                        <Column>
                            <label for="latitude">Latitude</label>
                            <input type="number" step="any" class="form-control" id="latitude"
                                   placeholder="Enter latitude"
                                   @bind-value="@_observingOptions.Latitude" />
                        </Column>
                        <Column>
                            <label for="longitude">Longitude</label>
                            <input type="number" step="any" class="form-control" id="longitude"
                                   placeholder="Enter longitude"
                                   @bind-value="@_observingOptions.Longitude" />
                        </Column>
                        <Column>
                            <label for="time-zone">Time Zone</label>
                            <input type="number" step="1" class="form-control" id="time-zone"
                                   @bind-value="@_observingOptions.TimeZone" />
                        </Column>
                    </Row>
                    <Divider DividerType="DividerType.TextContent" Text="Viewing Range" />
                    <Row Gutter="(0, 16)">
                        <Column>
                            <label for="min-altitude">Minimum Altitude</label>
                            <input type="number" step="any" class="form-control" id="min-altitude"
                                   @bind-value="@_observingOptions.MinAltitude"
                                   disabled />
                            <Small TextColor="TextColor.Muted">
                                (Coming soon)
                                Use to omit objects too near to the horizon.
                            </Small>
                        </Column>
                    </Row>
                    <!--
                    <div class="row mb-3">
                        <div class="col">
                            <label for="azimuth">Azimuth Range</label>
                            <div class="row" id="azimuth">
                                <div class="col-lg-6">
                                    <input type="number" step="any" class="form-control"
                                           placeholder="Enter minimum azimuth"
                                           aria-describedby="min-azimuth-help"
                                           @bind-value="@_observingOptions.MinAzimuth" />
                                    <small class="form-text text-muted" id="min-azimuth-help">
                                        Min azimuth
                                    </small>
                                </div>
                                <div class="col-lg-6">
                                    <input type="number" step="any" class="form-control"
                                           placeholder="Enter maximum azimuth"
                                           aria-describedby="max-azimuth-help"
                                           @bind-value="@_observingOptions.MaxAzimuth" />
                                    <small class="form-text text-muted" id="max-azimuth-help">
                                        Max azimuth
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div class="col">
                            <label for="altitude">Altitude Range</label>
                            <div class="row" id="altitude">
                                <div class="col-lg-6">
                                    <input type="number" step="any" class="form-control"
                                           placeholder="Enter minimum altitde"
                                           aria-describedby="min-altitde-help"
                                           @bind-value="@_observingOptions.MinAltitude" />
                                    <small class="form-text text-muted" id="min-altitude-help">
                                        Min altitude
                                    </small>
                                </div>
                                <div class="col-lg-6">
                                    <input type="number" step="any" class="form-control"
                                           placeholder="Enter maximum altitude"
                                           aria-describedby="max-altitude-help"
                                           @bind-value="@_observingOptions.MaxAltitude" />
                                    <small class="form-text text-muted" id="max-altitude-help">
                                        Max altitude
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>
                    -->
                </CardText>
                <Button Color="Color.Primary" Loading="@_findingObjects"
                        Clicked="@HandleValidSubmit">
                    <LoadingTemplate>
                        Finding...
                    </LoadingTemplate>
                    <ChildContent>
                        Find
                    </ChildContent>
                </Button>
            </CardBody>
        </Card>
    </Column>
    <Column>
        @if (_filteredObjects.Count() > 0)
        {
            <Div Flex="Flex.JustifyContent.Between">
                <Small TextWeight="TextWeight.Bold">
                    Total: @_filteredObjects.Count()
                </Small>
                <Small>
                    @string.Join(" | ", @_filteredObjectDetails.TypeCount.Keys
                        .Where(t=>_filteredObjectDetails.TypeCount[t] > 0)
                        .Select(t => $"{AnnotateAstroObjectType(t).Pluralize()} {_filteredObjectDetails.TypeCount[t]}"))
                </Small>
            </Div>
            <Small TextColor="TextColor.Muted">
            </Small>
        }
        <ListGroup>
            @foreach (var obj in _filteredObjectReps)
            {
                <!-- Display
                    o ?Name
                    o Classifications
                    o RA/Dec
                    o Alt/Az
                    o Cardinal direction
                -->
                <ListGroupItem>
                    <Div Flex="Flex.JustifyContent.Between" Width="Width.Is100" Background="Background.Success">
                        <Heading Size="HeadingSize.Is6" Margin="Margin.Is1.FromBottom">
                            <Text TextWeight="TextWeight.Bold">
                                @(string.IsNullOrEmpty(obj.Name) ? "" : $"{obj.Name} - ")
                            </Text>
                            <Text TextWeight="TextWeight.Normal">
                                @string.Join(" | ",
                            @obj.Classification.CatalogueId.Keys.Select(
                            c=>$"{c} {obj.Classification.CatalogueId[c]}"
                            )
                            )
                            </Text>
                        </Heading>
                        <Div>
                            <Text TextWeight="TextWeight.Bold">RA:</Text>
                            @(obj.RightAscension.Hours)h @(obj.RightAscension.Minutes)m @(obj.RightAscension.Seconds)s |
                            <Text TextWeight="TextWeight.Bold">Dec:</Text>
                            @(obj.Declination.Degrees)&#176; @(obj.Declination.Minutes)' @(obj.Declination.Seconds)"
                        </Div>
                    </Div>
                    <Div>
                        <Div TextWeight="TextWeight.Bold">Azimuth</Div>
                        <Div>
                            @(obj.StartAzimuth.Degrees)&#176; @(obj.StartAzimuth.Minutes)' @(obj.StartAzimuth.Seconds)" -
                            @(obj.EndAzimuth.Degrees)&#176; @(obj.EndAzimuth.Minutes)' @(obj.EndAzimuth.Seconds)"
                        </Div>
                        <Div TextWeight="TextWeight.Bold">Altitude</Div>
                        <Div>
                            @(obj.StartAltitude.Degrees)&#176; @(obj.StartAltitude.Minutes)' @(obj.StartAltitude.Seconds)" -
                            @(obj.EndAltitude.Degrees)&#176; @(obj.EndAltitude.Minutes)' @(obj.EndAltitude.Seconds)"
                        </Div>
                    </Div>
                </ListGroupItem>
            }
        </ListGroup>
    </Column>
</Row>


@code {
    private class ObservingOptions
    {
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public double Latitude { get; set; }
        public double Longitude { get; set; }
        public int TimeZone { get; set; }
        public double MinAzimuth { get; set; }
        public double MaxAzimuth { get; set; }
        public double MinAltitude { get; set; }
        public double MaxAltitude { get; set; }
    }

    private string Cardinal(double az)
    {
        string[] caridnals = { "N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW", "W", "WNW", "NW", "NNW", "N" };
        return caridnals[(int)Math.Round(((double)az * 10 % 3600) / 225)];
    }


    private string DegreeRepresentation(double degrees)
    {
        int d = (int)Math.Floor(degrees);
        int m = (int)Math.Floor((degrees - d) * 100);
        double s = Math.Round(((degrees - d) * 100 - m) * 100, 1);
        return $"{d}";
    }

    private record AstroObjectRep(string Name,
        AstroObject.AstroObjectClassification Classification,
        HoursMinutesSeconds RightAscension,
        DegreesMinutesSeconds Declination,
        DegreesMinutesSeconds StartAzimuth,
        DegreesMinutesSeconds StartAltitude,
        DegreesMinutesSeconds EndAzimuth,
        DegreesMinutesSeconds EndAltitude,
        string Cardinal
    );

    private record ObjectEnumerationDetails
    {
        public IDictionary<AstroObject.Type, int>? TypeCount { get; init; }
    }

    private class DegreesMinutesSeconds
    {
        public int Degrees { get; set; }
        public int Minutes { get; set; }
        public double Seconds { get; set; }

        public DegreesMinutesSeconds(double degreesDecimal, int secondsDecimalPlaces)
        {
            Degrees = (int)Math.Floor(degreesDecimal);
            Minutes = (int)Math.Floor(60 * (degreesDecimal - Degrees));
            Seconds = Math.Round(60 * (60 * (degreesDecimal - Degrees) - Minutes), secondsDecimalPlaces);
        }
    }

    private class HoursMinutesSeconds
    {
        public int Hours { get; set; }
        public int Minutes { get; set; }
        public double Seconds { get; set; }

        public HoursMinutesSeconds(double degreesDecimal, int secondsDecimalPlaces)
        {
            var hoursDecimal = degreesDecimal / 15;
            Hours = (int)Math.Floor(hoursDecimal);
            Minutes = (int)Math.Floor(60 * (hoursDecimal - Hours));
            Seconds = Math.Round(60 * (60 * (hoursDecimal - Hours) - Minutes), secondsDecimalPlaces);
        }
    }

    private EditContext? _editContext;
    private ObservingOptions _observingOptions = new ObservingOptions();
    private bool _findingObjects = false;
    private bool _badConnection = false;
    private IEnumerable<AstroObject> _objects = Enumerable.Empty<AstroObject>();
    private IEnumerable<AstroObject> _filteredObjects = Enumerable.Empty<AstroObject>();
    private IEnumerable<AstroObjectRep> _filteredObjectReps = Enumerable.Empty<AstroObjectRep>();
    private ObjectEnumerationDetails _filteredObjectDetails;

    protected override async Task OnInitializedAsync()
    {
        _filteredObjects = Enumerable.Empty<AstroObject>();
        DateTime now = DateTime.Now;
        // Firefox does not support seconds, so round to previous minute
        _observingOptions = new ObservingOptions
            {
                StartTime = DateTime.Now.Date.AddHours(System.Math.Max(20, DateTime.Now.Hour)),
                EndTime = DateTime.Now.Date.AddHours(System.Math.Max(22, DateTime.Now.Hour + 2)),
                TimeZone = -5,
                MinAzimuth = 0d,
                MaxAzimuth = 180d,
                MinAltitude = 0d,
                MaxAltitude = 180d,
                Latitude = 36.131839d,
                Longitude = -80.278994d
            };
        _editContext = new EditContext(_observingOptions);
#if DEBUG
    AstroObject testObject = new AstroObject
    {   // Based on Orion Nebula
    Id="47",
    Name="Ambra Nebula",
    Classification= new AstroObject.AstroObjectClassification(
    CatalogueId: new Dictionary<AstroObject.Catalogue, int>
    {
    {AstroObject.Catalogue.Messier, 111},
    {AstroObject.Catalogue.NGC, 4747},
    {AstroObject.Catalogue.Caldwell, 17}
    },
    Type: AstroObject.Type.Diffuse,
    Subtype: AstroObject.Subtype.None,
    SubtypeClassification: "Reflection Nebula"
    ),
    RightAscension= 84.09471d,
    Declination= -5.37822d
    };
    AstroObject secondObject = testObject with {
    // Based on NGC 4755 - Jewel Box Cluster
    Name="Mia Cluster",
    Classification = testObject.Classification with
    {
    Type = AstroObject.Type.Open,
    Subtype = AstroObject.Subtype.None,
    SubtypeClassification = ""
    },
    RightAscension = 15d*(12d+54d/60+57.63d/60/60),
    Declination = -60d-28d/60-31.8d/60/60
    };
    AstroObject thirdObject = testObject with {
    // Based on Messier 52 - Scorpion Cluster
    Name="Ellie Cluster",
    Classification = testObject.Classification with
    {
    Type = AstroObject.Type.Open,
    Subtype = AstroObject.Subtype.None,
    SubtypeClassification = ""
    },
    RightAscension = 15d*(23d+25d/6+44.85d/60/60),
    Declination = 61d+42d/60+59.6d/60/60
    };
    _objects = new List<AstroObject>{testObject, secondObject, thirdObject};
#else
        _filteredObjects = await GetAllObjects();
#endif
        _objects = await GetAllObjects();
        /*
        _filteredObjects = _objects;
        _filteredObjectReps = AstroObjectRepresentations(_filteredObjects, _observingOptions.StartTime, _observingOptions.EndTime, _observingOptions.TimeZone,
            new GeographicCoords(Latitude: _observingOptions.Latitude, Longitude: _observingOptions.Longitude));
        */
        StateHasChanged();
    }

    private async Task GetCurrentPosition()
    {
        // BUSTED - need to figure out jsinterop to get this to work
        //  - See https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API
        /*
        <div class="col-lg-4 d-flex">
            <div class="btn btn-secondary mt-auto"
                    @onclick="@GetCurrentPosition">
                Use my location
        </div>
        </div>
        */
        var res = await JSRuntime.InvokeAsync<(double latitude, double longitude)>("geolocation.getLocation");
        StateHasChanged();
    }

    private void HandleValidSubmit()
    {
        _filteredObjects = GetVisibleObjects(_objects, _observingOptions);
        _filteredObjectReps = AstroObjectRepresentations(_filteredObjects, _observingOptions.StartTime, _observingOptions.EndTime, _observingOptions.TimeZone,
            new GeographicCoords(_observingOptions.Latitude, _observingOptions.Longitude));
        int typeCount(AstroObject.Type t) => _filteredObjects.Where(o => o.Classification?.Type == t).Count();
        _filteredObjectDetails = new ObjectEnumerationDetails
            {
                TypeCount = new Dictionary<AstroObject.Type, int>
            {
                {AstroObject.Type.Elliptical, typeCount(AstroObject.Type.Elliptical)},
                {AstroObject.Type.Lenticular, typeCount(AstroObject.Type.Lenticular)},
                {AstroObject.Type.Spiral, typeCount(AstroObject.Type.Spiral)},
                {AstroObject.Type.Irregular, typeCount(AstroObject.Type.Irregular)},
                {AstroObject.Type.Globular, typeCount(AstroObject.Type.Globular)},
                {AstroObject.Type.Open, typeCount(AstroObject.Type.Open)},
                {AstroObject.Type.SupernovaRemnant, typeCount(AstroObject.Type.SupernovaRemnant)},
                {AstroObject.Type.Diffuse, typeCount(AstroObject.Type.Diffuse)},
                {AstroObject.Type.PlanetaryNebula, typeCount(AstroObject.Type.PlanetaryNebula)},
            }
            };
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
    }

    private IEnumerable<AstroObject> GetVisibleObjects(IEnumerable<AstroObject> set, ObservingOptions observingOptions)
    {
        DateOnly observingDate = DateOnly.FromDateTime(observingOptions.StartTime.Date);
        GeographicCoords geo = new(observingOptions.Latitude, observingOptions.Longitude);
        var output = set.Where(o => AboveHorizonDuringPeriod(o, observingDate, observingOptions.StartTime, observingOptions.EndTime, geo, observingOptions.TimeZone));
        return output.ToList();
    }

    private bool AboveHorizonDuringPeriod(AstroObject o, DateOnly observingDate, DateTime startTime, DateTime endTime, GeographicCoords geo, int timeZone)
    {
        EquitorialCoords eq = new(o.RightAscension, o.Declination);

        // Handle always above/below horizon cases
        var setBehavior = Asterism.LocalSystem.ObjectSets(eq, geo);
        if (setBehavior == Asterism.LocalSystem.ObjectSetBehavior.AlwaysBelowHorizon)
            return false;
        else if (setBehavior == Asterism.LocalSystem.ObjectSetBehavior.AlwaysAboveHorizon)
            return true;

        // Get rising/setting times
        double setHour = Asterism.LocalSystem.SetTime(eq, observingDate, geo, timeZone);
        double riseHour = Asterism.LocalSystem.RiseTime(eq, observingDate, geo, timeZone);
        DateTime setTime = new DateTime(observingDate.Year, observingDate.Month, observingDate.Day)
            .AddHours(setHour + (setHour < riseHour ? 24d - 4d / 60 : 0)); // If object sets before it rises in the day, then wrap rising time to next day
        DateTime riseTime = new DateTime(observingDate.Year, observingDate.Month, observingDate.Day)
            .AddHours(riseHour);

        // Check if time periods overlap
        bool overlap = startTime < setTime && riseTime < endTime;

        return overlap;
    }

    private async Task<IEnumerable<AstroObject>> GetAllObjects()
    {
        try
        {
            return await AstroObjectService.GetAll();
        }
        catch
        {
            return Enumerable.Empty<AstroObject>();
        }
    }

    private IEnumerable<AstroObjectRep> AstroObjectRepresentations(IEnumerable<AstroObject> objs, DateTime dateTimeStart, DateTime dateTimeEnd, int timeZone, GeographicCoords geoCoords)
    {
        return objs.Select(ao =>
        {
            var eqCoords = new EquitorialCoords(RightAscension: ao.RightAscension, Declination: ao.Declination);
            var startHorCoords = eqCoords.ToHorizontalCoords(dateTimeStart, geoCoords, timeZone);
            var endHorCoords = eqCoords.ToHorizontalCoords(dateTimeEnd, geoCoords, timeZone);
            return new AstroObjectRep(
                Name: ao.Name,
                Classification: ao.Classification,
                RightAscension: new HoursMinutesSeconds(ao.RightAscension, 1),
                Declination: new DegreesMinutesSeconds(ao.Declination, 1),
                StartAzimuth: new DegreesMinutesSeconds(startHorCoords.Azimuth, 1),
                StartAltitude: new DegreesMinutesSeconds(startHorCoords.Altitude, 1),
                EndAzimuth: new DegreesMinutesSeconds(endHorCoords.Azimuth, 1),
                EndAltitude: new DegreesMinutesSeconds(endHorCoords.Altitude, 1),
                    Cardinal: Cardinal(startHorCoords.Azimuth)
                );
        });
    }

    private string AnnotateAstroObjectType(AstroObject.Type t)
    {
        var map = new Dictionary<AstroObject.Type, string>
        {
            {AstroObject.Type.Elliptical, "Elliptical Galaxy"},
            {AstroObject.Type.Lenticular, "Lenticular Galaxy"},
            {AstroObject.Type.Spiral, "Spiral Galaxy"},
            {AstroObject.Type.Irregular, "Irregular Galaxy"},
            {AstroObject.Type.Globular, "Globular Cluster"},
            {AstroObject.Type.Open, "Open Cluster"},
            {AstroObject.Type.SupernovaRemnant, "Supernova Remnant"},
            {AstroObject.Type.Diffuse, "Diffuse Nebula"},
            {AstroObject.Type.PlanetaryNebula, "Planetary Nebula" }
        };
        return map[t];
    }

    private bool IsGalaxy(AstroObject.Type t)
    {
        return t == AstroObject.Type.Elliptical
            || t == AstroObject.Type.Lenticular
            || t == AstroObject.Type.Spiral
            || t == AstroObject.Type.Irregular;
    }
    private bool IsCluster(AstroObject.Type t)
    {
        return t == AstroObject.Type.Globular
            || t == AstroObject.Type.Open;
    }
    private bool IsNebula(AstroObject.Type t)
    {
        return t == AstroObject.Type.SupernovaRemnant
            || t == AstroObject.Type.Diffuse
            || t == AstroObject.Type.PlanetaryNebula;
    }
}
